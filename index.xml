<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Brain Dump</title><link>https://estensen.github.io/</link><description>Recent content on Brain Dump</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Jun 2021 11:47:14 +0200</lastBuildDate><atom:link href="https://estensen.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Rate Limiting</title><link>https://estensen.github.io/posts/rate-limiting/</link><pubDate>Mon, 28 Jun 2021 11:47:14 +0200</pubDate><guid>https://estensen.github.io/posts/rate-limiting/</guid><description>Sometimes clients use your API in a way you didn&amp;rsquo;t intend. Maybe they send requests more often than you&amp;rsquo;d like and degrade the experience for other users. Rate-limiting is a way of limiting how many requests a user can create.
Using a Go middleware we can intercept requests and check if they are allowed before passing it on to the handlers.
Time Bucketed The simplest way rate rate limiting is to store remaining limit that will expire after a certain amount of time.</description></item><item><title>Middleware</title><link>https://estensen.github.io/posts/middleware/</link><pubDate>Sun, 27 Jun 2021 14:47:47 +0200</pubDate><guid>https://estensen.github.io/posts/middleware/</guid><description>Some functionality is shared between handlers. Authentication, logging and rate limiting are some that comes to mind. Wouldn&amp;rsquo;t it be nice to not have to add that functionality to each new handler? With middlewares you can! Middlewares intercept an HTTP request and enables one to do stuff before the original handler function is excecuted.
By satisifying the http.Handler interface we can chain as many middlewares as we&amp;rsquo;d like.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; ) func loggerMiddleware(next http.</description></item><item><title>Creating a Go API</title><link>https://estensen.github.io/posts/api/</link><pubDate>Sun, 27 Jun 2021 11:04:11 +0200</pubDate><guid>https://estensen.github.io/posts/api/</guid><description>Often creating a service starts with defining an API. HTTP is the most common way of defining a way for a client to interact with service data. A browser can issue a request, ask the server to do something, by sending an HTTP method and a resource path. For example GET /answer. The server then has to match this request to its server logic. This is what the request router is for.</description></item><item><title>About Brain Dump</title><link>https://estensen.github.io/about/</link><pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate><guid>https://estensen.github.io/about/</guid><description>Brain Dump is my collection of notes written as a reference for future me. It is intended to be mostly about Go, Google Cloud and Terraform, but I may occationally venture into deeper water, learning things totally new to me. The notes will be crude. Most of the posts probably only half finished. Sometimes the truth will be omitted to simplify things.</description></item></channel></rss>